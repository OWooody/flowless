generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workflow {
  id             String              @id @default(cuid())
  name           String
  description    String?
  trigger        Json
  actions        Json[]
  edges          Json?
  isActive       Boolean             @default(true)
  organizationId String?
  userId         String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  executions     WorkflowExecution[]

  @@index([organizationId])
  @@index([userId])
  @@index([isActive])
  @@index([createdAt])
}

model WorkflowExecution {
  id                   String         @id @default(cuid())
  workflowId           String
  eventId              String?
  status               String
  results              Json?
  startedAt            DateTime       @default(now())
  completedAt          DateTime?
  errorMessage         String?
  databaseQueriesCount Int?
  errorDetails         Json?
  memoryUsageMb        Int?
  totalDurationMs      Int?
  triggerEvent         Json?
  workflow             Workflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  steps                WorkflowStep[]

  @@index([workflowId])
  @@index([status])
  @@index([startedAt])
  @@index([completedAt])
}

model WorkflowStep {
  id           String            @id @default(cuid())
  executionId  String
  stepOrder    Int
  stepType     String
  stepName     String
  status       String
  startTime    DateTime          @default(now())
  endTime      DateTime?
  durationMs   Int?
  inputData    Json?
  outputData   Json?
  errorMessage String?
  metadata     Json?
  execution    WorkflowExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@index([executionId])
  @@index([stepOrder])
  @@index([stepType])
  @@index([status])
  @@index([startTime])
}

model Webhook {
  id                 String    @id @default(cuid())
  url                String
  secret             String
  events             String[]
  isActive           Boolean   @default(true)
  organizationId     String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  lastTriggered      DateTime?
  failureCount       Int       @default(0)
  eventName          String?
  filterItemCategory String?
  filterItemName     String?
  filterValue        Float?
  filterItemId       String?

  @@index([organizationId])
  @@index([events])
  @@index([eventName])
  @@index([filterItemName])
  @@index([filterItemCategory])
  @@index([filterItemId])
}

model IntegrationCredential {
  id             String   @id @default(cuid())
  userId         String
  organizationId String?
  provider       String   // 'slack', 'google', 'email', etc.
  name           String   // User-friendly name
  config         Json     // Encrypted credentials
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([userId, provider])
  @@index([organizationId])
}

model IntegrationLog {
  id                String   @id @default(cuid())
  credentialId      String
  operation         String   // 'create', 'update', 'delete', 'test'
  status            String   // 'success', 'error'
  details           Json?
  errorMessage      String?
  createdAt         DateTime @default(now())
  
  @@index([credentialId])
  @@index([createdAt])
  @@index([status])
}
